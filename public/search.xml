<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli@3中使用bootstrap</title>
    <url>/2020/05/08/vue-import-bootstrap/</url>
    <content><![CDATA[<h1 id="Vue-cli-3创建的项目中如何使用Bootstrap"><a href="#Vue-cli-3创建的项目中如何使用Bootstrap" class="headerlink" title="Vue-cli@3创建的项目中如何使用Bootstrap"></a>Vue-cli@3创建的项目中如何使用Bootstrap</h1><h2 id="一、安装所需包"><a href="#一、安装所需包" class="headerlink" title="一、安装所需包"></a>一、安装所需包</h2><ol>
<li><p>Bootstrap 是基于 jQuery 开发的，所以先安装 jQuery。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install jquery -s</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Popper.js, BootStrap 内部有些嵌套组件，是依靠 Popper.js 来实现定位的。非必须安装如果你的项目会用到 BootStrap 中的类似于 下拉列表这样的组件，建议先提前安装 popper.js,否则可能报错。关于popper.js的介绍以及具体介绍如下。</p>
<blockquote>
<p><em>Popper.js是一款功能强大的JS定位引擎。</em>  <a href="https://blog.csdn.net/jhzhahuaiyu/article/details/90213582" target="_blank" rel="noopener">站在原型链顶端的男人的博客</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install popper.js -s</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 BootStrap 包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install bootstrap@3 -s</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="二、配置main-js-全局引入-bootstrap-和-jquery"><a href="#二、配置main-js-全局引入-bootstrap-和-jquery" class="headerlink" title="二、配置main.js 全局引入 bootstrap 和 jquery"></a>二、配置main.js 全局引入 bootstrap 和 jquery</h2><p><img src="/2020/05/08/vue-import-bootstrap/2-1.png" alt="2-1"></p>
<p><em>注意导入时，<code>import $ from &#39;jquery&#39;</code> 要写在最前面。否则可能报错</em></p>
<h2 id="三、配置-vue-config-js"><a href="#三、配置-vue-config-js" class="headerlink" title="三、配置 vue.config.js"></a>三、配置 vue.config.js</h2><ul>
<li>在 vue-cli@3搭建的 vue 项目默认是不没有该文件的，需要在 package.json 的同级目录下手动创建。具体代码如下：</li>
</ul>
<p><img src="/2020/05/08/vue-import-bootstrap/3-1.png" alt="3-1"></p>
<hr>
<p><em>如果一切顺利，便可以使用了。</em></p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中i++和++i的区别</title>
    <url>/2020/05/11/JavaScript%E4%B8%ADi-%E5%92%8C-i%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、-i-和-i-简单介绍"><a href="#一、-i-和-i-简单介绍" class="headerlink" title="一、++ i 和 i ++简单介绍"></a>一、++ i 和 i ++简单介绍</h2><p>++ 运算符又称自增运算符，功能为将操作数自加 1。</p>
<p><strong>++ i 被称为前加加，++ 后面的变量执行自加操作，执行顺序为：先执行变量的自加操作，再引用变量的值。</strong></p>
<p><strong>i ++ 被称为后加加，++ 前面的变量执行自加操作，执行顺序为：先引用变量的值，在执行自加操作。</strong></p>
<p>在实际代码中，如果加加语句是一个独立的语句，那么两者是完全相同的。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a ++; <span class="comment">/*完全等价于*/</span>  ++ a;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;...&#125;  <span class="comment">/*两者是完全等价的*/</span>  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; ++ i)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>上面两个示例 自增语句都是一个独立的语句，在这种情况下，<code>++ i</code>和<code>i ++</code>是完全等价的。</p>
<h2 id="二、-i-和-i-使用时的区别"><a href="#二、-i-和-i-使用时的区别" class="headerlink" title="二、 ++ i 和 i ++ 使用时的区别"></a>二、 ++ i 和 i ++ 使用时的区别</h2><p>当加加语句不是一个独立的语句，只是某一个语句的一部分，二者就有区别了。</p>
<ul>
<li>i ++</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> j = i ++; <span class="comment">//此时完整的语句为 let j = i ++;先执行变量赋值，再执行 ++ 操作先j = i = 0 后i = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( i ++ &lt; <span class="number">10</span>); <span class="comment">// 此时i是从0开始第一次比较，先判断 i &lt; 10,然后变量i再执行加加操作;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>++ i</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> j = ++ i; <span class="comment">//此时完整的语句为 let j = ++ i;先执行 ++ 操作，再赋值变量：先i = 1后j = i = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( ++ i &lt; <span class="number">10</span>); <span class="comment">// 此时i是从1开始第一次比较,变量i先执行加加操作，再判断 i &lt; 10;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
        <category>operator</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>operator</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的call、apply、bind函数的用法和区别</title>
    <url>/2020/05/16/JavaScript%E7%9A%84call%E3%80%81apply%E3%80%81bind%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h2><blockquote>
<p>这三个方法都是 JavaScript 函数原型链上的方法，每个函数都会自动继承这三个方法。</p>
<p>总的来说三者都是用来改变<strong>this指向</strong>的，可以实现在一个对象的成员函数调用其它对象的成员函数或者成员变量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jack = &#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    age:<span class="string">'23'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = &#123;</span><br><span class="line">    name:<span class="string">'tom'</span>,</span><br><span class="line">    age:<span class="string">'20'</span>,</span><br><span class="line">    printMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'This is '</span> + <span class="keyword">this</span>.name + <span class="string">',he is '</span> + <span class="keyword">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tom.printMessage.call(jack);	<span class="comment">// 结果：This is jack,he is 23.</span></span><br><span class="line">tom.printMessage.apply(jack);	<span class="comment">// 结果：This is jack,he is 23.</span></span><br><span class="line">tom.printMessage.bind(jack)();	<span class="comment">// 结果：This is jack,he is 23.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看见printMessage内部的this指向被改变，不在指向调用它的对象tom，而是指向了call、apply、bind传入的参数：对象jack。</span></span><br></pre></td></tr></table></figure>

<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><blockquote>
<p>这三个方法，在用途上没有什么区别，关键是在用法上存在区别。体现在他们三者的参数列表和返回值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jack = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="string">'23'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = &#123;</span><br><span class="line">    name: <span class="string">'tom'</span>,</span><br><span class="line">    age: <span class="string">'20'</span>,</span><br><span class="line">    printMessage: <span class="function"><span class="keyword">function</span>(<span class="params">from,to</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'This is '</span> + <span class="keyword">this</span>.name + <span class="string">',he is '</span> + <span class="keyword">this</span>.age + <span class="string">'from'</span> + <span class="keyword">from</span> </span><br><span class="line">                    + <span class="string">' to '</span> + to + <span class="string">'.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call方法，接受多个参数，第一个参数为执行函数的this值，其余参数将会按顺序赋值给执行函数的参数列表</span></span><br><span class="line">tom.printMessage.call(jack,<span class="string">'Beijin'</span>,<span class="string">'Shanghai'</span>);</span><br><span class="line"><span class="comment">// This is jack,he is 23 from Beijin to Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* apply方法，接受两个参数，第一个参数为执行函数的this值，第二个参数是一个数组，数组元素将会按顺序赋值给执行函数的参数列表 */</span></span><br><span class="line">tom.printMessage.apply(jack,[<span class="string">'Beijin'</span>,<span class="string">'Shanghai'</span>]);</span><br><span class="line"><span class="comment">// This is jack,he is 23 from Beijin to Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind方法，接受参数形式与call方法一致，但是返回的是一个新的函数，必须要手动调用一次才会执行。*/</span></span><br><span class="line">tom.printMessage.bind(jack,<span class="string">'Beijin'</span>,<span class="string">'Shanghai'</span>)();</span><br><span class="line"><span class="comment">// This is jack,he is 23 from Beijin to Shanghai</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
