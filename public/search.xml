<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli@3中使用bootstrap</title>
    <url>/2020/05/08/vue-import-bootstrap/</url>
    <content><![CDATA[<h1 id="Vue-cli-3创建的项目中如何使用Bootstrap"><a href="#Vue-cli-3创建的项目中如何使用Bootstrap" class="headerlink" title="Vue-cli@3创建的项目中如何使用Bootstrap"></a>Vue-cli@3创建的项目中如何使用Bootstrap</h1><h2 id="一、安装所需包"><a href="#一、安装所需包" class="headerlink" title="一、安装所需包"></a>一、安装所需包</h2><ol>
<li><p>Bootstrap 是基于 jQuery 开发的，所以先安装 jQuery。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install jquery -s</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Popper.js, BootStrap 内部有些嵌套组件，是依靠 Popper.js 来实现定位的。非必须安装如果你的项目会用到 BootStrap 中的类似于 下拉列表这样的组件，建议先提前安装 popper.js,否则可能报错。关于popper.js的介绍以及具体介绍如下。</p>
<blockquote>
<p><em>Popper.js是一款功能强大的JS定位引擎。</em>  <a href="https://blog.csdn.net/jhzhahuaiyu/article/details/90213582" target="_blank" rel="noopener">站在原型链顶端的男人的博客</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install popper.js -s</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 BootStrap 包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install bootstrap@3 -s</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="二、配置main-js-全局引入-bootstrap-和-jquery"><a href="#二、配置main-js-全局引入-bootstrap-和-jquery" class="headerlink" title="二、配置main.js 全局引入 bootstrap 和 jquery"></a>二、配置main.js 全局引入 bootstrap 和 jquery</h2><p><img src="/2020/05/08/vue-import-bootstrap/2-1.png" alt="2-1"></p>
<p><em>注意导入时，<code>import $ from &#39;jquery&#39;</code> 要写在最前面。否则可能报错</em></p>
<h2 id="三、配置-vue-config-js"><a href="#三、配置-vue-config-js" class="headerlink" title="三、配置 vue.config.js"></a>三、配置 vue.config.js</h2><ul>
<li>在 vue-cli@3搭建的 vue 项目默认是不没有该文件的，需要在 package.json 的同级目录下手动创建。具体代码如下：</li>
</ul>
<p><img src="/2020/05/08/vue-import-bootstrap/3-1.png" alt="3-1"></p>
<hr>
<p><em>如果一切顺利，便可以使用了。</em></p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中i++和++i的区别</title>
    <url>/2020/05/11/JavaScript%E4%B8%ADi-%E5%92%8C-i%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、-i-和-i-简单介绍"><a href="#一、-i-和-i-简单介绍" class="headerlink" title="一、++ i 和 i ++简单介绍"></a>一、++ i 和 i ++简单介绍</h2><p>++ 运算符又称自增运算符，功能为将操作数自加 1。</p>
<p><strong>++ i 被称为前加加，++ 后面的变量执行自加操作，执行顺序为：先执行变量的自加操作，再引用变量的值。</strong></p>
<p><strong>i ++ 被称为后加加，++ 前面的变量执行自加操作，执行顺序为：先引用变量的值，在执行自加操作。</strong></p>
<p>在实际代码中，如果加加语句是一个独立的语句，那么两者是完全相同的。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a ++; <span class="comment">/*完全等价于*/</span>  ++ a;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;...&#125;  <span class="comment">/*两者是完全等价的*/</span>  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; ++ i)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>上面两个示例 自增语句都是一个独立的语句，在这种情况下，<code>++ i</code>和<code>i ++</code>是完全等价的。</p>
<h2 id="二、-i-和-i-使用时的区别"><a href="#二、-i-和-i-使用时的区别" class="headerlink" title="二、 ++ i 和 i ++ 使用时的区别"></a>二、 ++ i 和 i ++ 使用时的区别</h2><p>当加加语句不是一个独立的语句，只是某一个语句的一部分，二者就有区别了。</p>
<ul>
<li>i ++</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> j = i ++; <span class="comment">//此时完整的语句为 let j = i ++;先执行变量赋值，再执行 ++ 操作先j = i = 0 后i = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( i ++ &lt; <span class="number">10</span>); <span class="comment">// 此时i是从0开始第一次比较，先判断 i &lt; 10,然后变量i再执行加加操作;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>++ i</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> j = ++ i; <span class="comment">//此时完整的语句为 let j = ++ i;先执行 ++ 操作，再赋值变量：先i = 1后j = i = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( ++ i &lt; <span class="number">10</span>); <span class="comment">// 此时i是从1开始第一次比较,变量i先执行加加操作，再判断 i &lt; 10;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
        <category>operator</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>operator</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的call、apply、bind函数的用法和区别</title>
    <url>/2020/05/16/JavaScript%E7%9A%84call%E3%80%81apply%E3%80%81bind%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h2><blockquote>
<p>这三个方法都是 JavaScript 函数原型链上的方法，每个函数都会自动继承这三个方法。</p>
<p>总的来说三者都是用来改变<strong>this指向</strong>的，可以实现在一个对象的成员函数调用其它对象的成员函数或者成员变量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jack = &#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    age:<span class="string">'23'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = &#123;</span><br><span class="line">    name:<span class="string">'tom'</span>,</span><br><span class="line">    age:<span class="string">'20'</span>,</span><br><span class="line">    printMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'This is '</span> + <span class="keyword">this</span>.name + <span class="string">',he is '</span> + <span class="keyword">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tom.printMessage.call(jack);	<span class="comment">// 结果：This is jack,he is 23.</span></span><br><span class="line">tom.printMessage.apply(jack);	<span class="comment">// 结果：This is jack,he is 23.</span></span><br><span class="line">tom.printMessage.bind(jack)();	<span class="comment">// 结果：This is jack,he is 23.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看见printMessage内部的this指向被改变，不在指向调用它的对象tom，而是指向了call、apply、bind传入的参数：对象jack。</span></span><br></pre></td></tr></table></figure>

<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><blockquote>
<p>这三个方法，在用途上没有什么区别，关键是在用法上存在区别。体现在他们三者的参数列表和返回值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jack = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="string">'23'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = &#123;</span><br><span class="line">    name: <span class="string">'tom'</span>,</span><br><span class="line">    age: <span class="string">'20'</span>,</span><br><span class="line">    printMessage: <span class="function"><span class="keyword">function</span>(<span class="params">from,to</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'This is '</span> + <span class="keyword">this</span>.name + <span class="string">',he is '</span> + <span class="keyword">this</span>.age + <span class="string">'from'</span> + <span class="keyword">from</span> </span><br><span class="line">                    + <span class="string">' to '</span> + to + <span class="string">'.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call方法，接受多个参数，第一个参数为执行函数的this值，其余参数将会按顺序赋值给执行函数的参数列表</span></span><br><span class="line">tom.printMessage.call(jack,<span class="string">'Beijin'</span>,<span class="string">'Shanghai'</span>);</span><br><span class="line"><span class="comment">// This is jack,he is 23 from Beijin to Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* apply方法，接受两个参数，第一个参数为执行函数的this值，第二个参数是一个数组，数组元素将会按顺序赋值给执行函数的参数列表 */</span></span><br><span class="line">tom.printMessage.apply(jack,[<span class="string">'Beijin'</span>,<span class="string">'Shanghai'</span>]);</span><br><span class="line"><span class="comment">// This is jack,he is 23 from Beijin to Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* bind方法，接受参数形式与call方法一致，但是返回的是一个新的函数，必须要手动调用一次才会执行。*/</span></span><br><span class="line">tom.printMessage.bind(jack,<span class="string">'Beijin'</span>,<span class="string">'Shanghai'</span>)();</span><br><span class="line"><span class="comment">// This is jack,he is 23 from Beijin to Shanghai</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6（一）-let和const命令</title>
    <url>/2020/05/16/ES6%EF%BC%88%E4%B8%80%EF%BC%89-let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="1-let-命令"><a href="#1-let-命令" class="headerlink" title="1. let 命令"></a>1. let 命令</h2><blockquote>
<p>ES6 新增 let 命令，用于声明变量。用来解决 var 命令带来的弊端，是新一代的标准。</p>
</blockquote>
<p>let 命令与 var 命令的区别：</p>
<ul>
<li><p>只作用于 let 命令所在的块级作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// ReferenceError: a is not defined;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中 <code>{}</code> 中为一个单独的块级作用域，在这个作用域中用 <code>var</code> 声明的变量，在该作用域以外还是可以被正常访问，而在该作用域中用 <code>let</code> 命令声明的变量，在该作用域外部引用会报错。</p>
</li>
<li><p>不存在变量提升。</p>
<blockquote>
<p>变量提升：即变量在未声明之前就可以使用，值为undefined。这种现象就是变量提升。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中使用 <code>var</code> 命令声明的变量，在声明之前已经可以调用，只不过输出的值为 <code>undefined</code> 。而使用 <code>let</code> 命令声明的变量，在声明之前不可以调用，会报错。</p>
<blockquote>
<p>js 预编译阶段：此阶段进行变量和函数的声明（特指声明式函数），但是不对变量进行赋值，变量的默认值为 <code>undefined</code> 。这也是变量提示的原因所在</p>
<p>js 代码执行阶段：此阶段对变量进行赋值和函数的调用。</p>
</blockquote>
<p>变量提升的实质：js 在预编译阶段将所有的声明提到代码最前面，此时内存中有一个存放 <code>undefined</code> 的地方，将这些声明的变量或函数全部指向该内存地址。因为变量的实质就是一个内存地址，用来指向某个我们赋值给它的数据。</p>
<p>上面是 js 的执行顺序，使用 <code>let</code> 命令声明的变量，在预编译阶段 js 解析引擎是不会对其进行变量提升操作，不会将他提到代码最前面，所以用 <code>let</code> 命令声明的变量，在 <code>let</code> 前面出现时它的值并不是 <code>undefined</code>而是一段解析引擎不认识的一个非法变量，这个变量不是一个有效的内存地址，所以解析引擎会直接抛出一个错误。</p>
</li>
<li><p>暂时性死区。</p>
<blockquote>
<p>只要块级作用域内存在 <code>let</code> 命令，它所声明的变量就“绑定”(binding)这个区域，不在受外部影响。</p>
<p>在代码块内，使用 <code>let</code> 命令声明变量之前，该变量都是不可用的。在语法上，成为“暂时性死区”（temporal dead zone, 简称 TDZ）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    a = <span class="string">'321'</span>;	<span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述代码可以看出，即使在 <code>if</code> 代码块前面声明了变量 <code>a</code> ，但在 <code>if</code> 代码块内部由于 <code>let</code> 命令的存在，所以代码块内部的变量 <code>a</code> 只认内部的 <code>let</code> 命令，只能在 <code>let</code> 命令之后使用，否则会报错，这就是暂时性死区。</p>
</li>
<li><p>不允许重复声明。</p>
<p>当使用 <code>var</code> 命令去声明变量时，可以重复声明，在语法这没有任何问题，解析引擎会将后面的声明覆盖掉前面的声明。但是 <code>let</code> 命令是在同一个块级作用域内是不允许重复声明的，<code>var</code> 也不行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>配置npm安装全局模块时的路径</title>
    <url>/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<blockquote>
<p>配置原因:</p>
<p>在执行 <code>npm install &#39;包名&#39; -g</code> 命令全局安装的时候，会默认将模块安装在 <code>C:\Users\用户名\AppData\Roaming路径下的npm和npm_cache</code> 中，不方便管理并且占用 C 盘空间。</p>
</blockquote>
<ul>
<li><p>解决方案：配置自定义的全局模块安装目录。</p>
<ol>
<li><p>手动创建两个文件夹 <code>node_global</code> 和 <code>node_cache</code> 。</p>
<p>如果你的 <code>Node.js</code> 没有安装在 C 盘，你可以直接在 <code>Node.js</code> 的安装目录下创建这两个文件。</p>
<p>如果你的 <code>Node.js</code> 是安装在 C 盘的，那么不建议你直接在其安装目录下创建，因为这样做意义不大，包文件还是存放在 C 盘。这种情况你可以在 C 盘以外你认为比较好管理的地方创建 <code>node_global</code> 和 <code>node_cache</code> 这两个目录。</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-1.png" alt="1-1"></p>
<p>上图的<code>npm-install-package</code> 也是我手动创建的。总之哪里好管理你就先建在那里。</p>
</li>
<li><p>在 cmd 命令行下执行如下配置命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\npm-install-package\node_global"</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\npm-install-package\node_cache"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完毕后，需要去配置环境变量：</p>
<p>环境变量 – 系统变量：新建一个变量 <strong>NODE_PATH</strong> ，值为 <strong>D:\npm-install-package\node_global\node_modules</strong>，如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-2.png" alt="1-2"></p>
<p>环境变量 – 用户变量：编辑用户变量里面的<strong>Path</strong>，将原来的 npm 路径</p>
<p>(“C:\Users\用户名\AppData\Roaming\npm”) 改为 <strong>D:\npm-install-package\node_global</strong> 如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-3.png" alt="1-3"></p>
</li>
<li><p>配置已经完成，可以全局安装一个包测试一下。</p>
<p>cmd 下执行 <code>npm install webpack -g</code> 全局安装 <code>webpack</code> 如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-4.png" alt="1-4"></p>
<p>安装完毕后查看我们的<code>node_cache</code> 和 <code>node_global</code> 文件夹，如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-5.png" alt="1-5"></p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-6.png" alt="1-6"></p>
</li>
<li><p>最后 cmd 任意目录下输入 <code>webpack -v</code> 检查是否安装成功，如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-7.png" alt="1-7"></p>
</li>
</ol>
</li>
<li><p>可能遇到的问题</p>
<ol>
<li><p>首先是 cnpm 的问题：有些兄弟之前为了装包快是自己配置了淘宝镜像的，但是当我们配置完了上面的内容会发现 cnpm 用不了了 <strong>cnpm 不是系统内部或外部命令</strong>。这是由于我们更改了环境变量导致的，因为原来的 cnpm 是装在了 “C:\Users\用户名\AppData\Roaming\npm” 里的，后来改变了该路径，所以系统找不到我们的 cnpm 很正常。</p>
<p>此时你只需要重新执行 <code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code> 就行了。执行以后在我们的 <code>node_global</code> 下可以看见如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-8.png" alt="1-8"></p>
<p>并且可以在 <code>node_global\node_modules</code> 下看见我们安装的包，如下图所示：</p>
<p><img src="/2020/05/22/%E9%85%8D%E7%BD%AEnpm%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84/1-9.png" alt="1-9"></p>
<p>同理之前其它的包有可能也用不了了，只需重新安装就好。</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>npm</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>float布局</title>
    <url>/2020/05/23/float%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<blockquote>
<p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>
<p>如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。</p>
</blockquote>
<p><strong>PS:</strong>假如在一行之上只有极少的空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止。</p>
<h2 id="常见的取值"><a href="#常见的取值" class="headerlink" title="常见的取值"></a>常见的取值</h2><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>元素向左浮动。</td>
</tr>
<tr>
<td>right</td>
<td>元素向右浮动。</td>
</tr>
<tr>
<td>none</td>
<td>默认值。元素正常显示。</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承float属性的值。</td>
</tr>
</tbody></table>
<h2 id="浮动原理"><a href="#浮动原理" class="headerlink" title="浮动原理"></a>浮动原理</h2><p>设置了浮动属性的元素会脱离正常的文档流，相对于其它正常的元素浮动起来。浮动的参照边界是父级元素的边界或者是其它浮动元素的边界。如下图所示。</p>
<p><img src="/2020/05/23/float%E5%B8%83%E5%B1%80/%E6%B5%AE%E5%8A%A8%E5%8E%9F%E7%90%86.png" alt="浮动原理"></p>
<h2 id="浮动的影响"><a href="#浮动的影响" class="headerlink" title="浮动的影响"></a>浮动的影响</h2><ul>
<li><p>不会影响未浮动的块级元素布局，但会影响内联元素的布局。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#container-one</span>&#123;</span></span><br><span class="line">                height: 200px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#container-one</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#container-one</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">                background-color: deepskyblue;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.item-block</span>&#123;</span></span><br><span class="line">                background-color: thistle;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.item-float</span>&#123;</span></span><br><span class="line">                background-color: wheat;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.item-float-left</span>&#123;</span></span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"container-one"</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-float item-float-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/23/float%E5%B8%83%E5%B1%80/1.png" alt="1"></p>
</li>
<li><p>浮动后的元素可以设置宽度和高度，意味着内联元素浮动以后会变成 <code>inline-block</code> 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#container-two</span>&#123;</span></span><br><span class="line">                width: 500px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: darkcyan;                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#container-two</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">                width: 200px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background-color: deepskyblue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#container-two</span> <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">                float: left;</span><br><span class="line">                background-color: wheat;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"container-two"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内联元素,无法设置宽高<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>浮动后的内联元素，可以设置宽高<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/23/float%E5%B8%83%E5%B1%80/2.png" alt="2"></p>
</li>
<li><p>可能导致父元素高度坍塌</p>
<p>前面的示例都是对父元素设置了一个固定高度，如果不设置这个高度，正常来说父元素的高度将由子元素的高度撑开，但是浮动后的子元素是脱离了正常的文档流的，这种情况下是不会为父元素提供可使用的高度的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#container-three</span>&#123;</span></span><br><span class="line">                width: 500px;</span><br><span class="line">                background-color: darkcyan;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#container-three</span> <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#container-three</span> <span class="selector-class">.float-left</span>&#123;</span></span><br><span class="line">                float: left;</span><br><span class="line">                background-color: thistle;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-id">#container-three</span> <span class="selector-class">.float-right</span>&#123;</span></span><br><span class="line">                float: right;</span><br><span class="line">                background-color: wheat;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"container-three"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float float-left"</span>&gt;</span>左浮动子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float float-right"</span>&gt;</span>右浮动子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/23/float%E5%B8%83%E5%B1%80/%E6%B5%AE%E5%8A%A8%E5%AF%BC%E8%87%B4%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="浮动导致父元素高度坍塌示意图"></p>
<p>如上图所示，浮动的子元素还是可以找到正确的参照边界（父元素的左右边框），但是通过审查元素会发现父级元素 <code>&lt;article id=&quot;contaiiner&gt;&lt;/article&gt;&quot;</code> 的高度是0。这就是元素浮动导致的父级元素高度坍塌现象。</p>
</li>
</ul>
<h2 id="闭合浮动"><a href="#闭合浮动" class="headerlink" title="闭合浮动"></a>闭合浮动</h2><blockquote>
<p>清除浮动和闭合浮动的区别：</p>
<p>清除浮动是指的CSS中的属性: clear: left|right|both|none;</p>
<p>闭合浮动是指的是，通过一定方法，减少或消除在布局过程中由于使用浮动属性带来的问题，例如上面提到的父级元素高度崩塌等问题。</p>
</blockquote>
<p>闭合浮动常用的几种方式：</p>
<p>1、在浮动元素末尾添加一个空 <code>div</code> 设置其 <code>clear</code> 属性值为 both，例如 <code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></p>
<p>2、父级元素定义 <code>overflow:hidden</code></p>
<p>3、对父级元素也使用浮动，就是说让所有元素都浮动起来，这种方法只建议用于理论，实际操作这种方式不太显示。</p>
<p>4、对父级元素设置伪元素，即 ：after</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class-name</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/23/float%E5%B8%83%E5%B1%80/%E9%97%AD%E5%90%88%E6%B5%AE%E5%8A%A8%E5%90%8E%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="闭合浮动后的示意图"></p>
<p>如上图所示：闭合浮动后父级元素的高度出来了，这样即可解决高度崩塌的问题了。</p>
]]></content>
      <categories>
        <category>css</category>
        <category>layout</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript获取元素的宽高的四种方式</title>
    <url>/2020/05/24/javascript%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%BD%E9%AB%98%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>通过 <code>javascript</code> 获取元素的宽高是经常使用的，在此总结一些常见的方法，以及各个方法的区别，和适用场景。</p>
</blockquote>
<h2 id="一、dom-style-width-height"><a href="#一、dom-style-width-height" class="headerlink" title="一、dom.style.width/height"></a>一、dom.style.width/height</h2><p>通过 DOM 元素的 <code>style</code> 属性可以获取到元素的内联样式，如果元素的宽高是内联样式规定的可以采用这个方法。如果元素的宽高不是由内联样式指定，此方法无效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"targt"</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;background-color:thistle"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">"#target"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(dom.style.width); <span class="comment">// 100px</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>PS:此方法只能获取到元素的内联样式指定的宽高，如果是行内样式或者外联样式是获取不到的。</strong></p>
<h2 id="二、dom-currentStyle-width-height"><a href="#二、dom-currentStyle-width-height" class="headerlink" title="二、dom.currentStyle.width/height"></a>二、dom.currentStyle.width/height</h2><p>获取的是元素经过浏览器渲染以后的<strong>及时宽高</strong>，比较第一种更全面不局限于内联样式。但是此方法只对<strong>IE浏览器</strong>有效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#target</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        background-color: thistle;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">"#target"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(dom.currentStyle.width); <span class="comment">// IE浏览器下: 100px</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="三、window-getComputedStyle-dom-width-height"><a href="#三、window-getComputedStyle-dom-width-height" class="headerlink" title="三、window.getComputedStyle(dom).width/height"></a>三、window.getComputedStyle(dom).width/height</h2><p>这个原理跟第二种一样，是获取元素渲染以后的<strong>即使宽高</strong>，此方法适用的是标准浏览器<strong>Firefox、chrome</strong>等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#target</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        background-color: thistle;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">"#target"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> width = <span class="built_in">window</span>.getComputedStyle(dom).width;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(width); <span class="comment">// 标准浏览器下: 100px;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="四、dom-getBoundingClientRect-width-height"><a href="#四、dom-getBoundingClientRect-width-height" class="headerlink" title="四、dom.getBoundingClientRect().width/height"></a>四、dom.getBoundingClientRect().width/height</h2><p><code>getBoundingClientRect()</code>这个api其实本事不是专门为了获取元素宽高而使用的，它主要是获取浏览器及时运行完以后一个dom元素的左上角顶点的绝对位置。返回了四个主要内容<code>top</code>、<code>left</code>、<code>width</code>、<code>height</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#target</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        background-color: thistle;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">"#target"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> width = dom.getBoundingClientRect().width;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(width); <span class="comment">// 100; 注意它只返回数值 100 而不是完整的 100px;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>getBoundingClientRect()</code>完整返回值如下图所示：</p>
<p><img src="/2020/05/24/javascript%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%BD%E9%AB%98%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/getBoundingClientRect%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="getBoundingClientRect返回值"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
